{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "source_finder.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "!pip install photutils\n",
        "!pip install healpy\n",
        "import numpy as np\n",
        "import healpy as hp\n",
        "import matplotlib.pyplot as plt\n",
        "from photutils.datasets import make_noise_image\n",
        "import scipy.ndimage as nd\n",
        "import numpy.ma as ma\n",
        "\n",
        "\n",
        "def pad_with(vector, pad_width, iaxis, kwargs):\n",
        "    pad_value = kwargs.get('padder', 1)\n",
        "    vector[:pad_width[0]] = pad_value\n",
        "    vector[-pad_width[1]:] = pad_value"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LRYtEqz2Sr5z",
        "outputId": "f3d59ccf-0dd9-42b3-b69f-02415d3bdf17"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting photutils\n",
            "  Downloading photutils-1.3.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (826 kB)\n",
            "\u001b[K     |████████████████████████████████| 826 kB 5.1 MB/s \n",
            "\u001b[?25hRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from photutils) (1.21.6)\n",
            "Requirement already satisfied: astropy>=4.0 in /usr/local/lib/python3.7/dist-packages (from photutils) (4.3.1)\n",
            "Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from astropy>=4.0->photutils) (4.12.0)\n",
            "Requirement already satisfied: pyerfa>=1.7.3 in /usr/local/lib/python3.7/dist-packages (from astropy>=4.0->photutils) (2.0.0.1)\n",
            "Requirement already satisfied: typing-extensions>=3.6.4 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->astropy>=4.0->photutils) (4.1.1)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->astropy>=4.0->photutils) (3.8.0)\n",
            "Installing collected packages: photutils\n",
            "Successfully installed photutils-1.3.0\n",
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting healpy\n",
            "  Downloading healpy-1.15.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (23.6 MB)\n",
            "\u001b[K     |████████████████████████████████| 23.6 MB 1.4 MB/s \n",
            "\u001b[?25hRequirement already satisfied: astropy in /usr/local/lib/python3.7/dist-packages (from healpy) (4.3.1)\n",
            "Requirement already satisfied: numpy>=1.13 in /usr/local/lib/python3.7/dist-packages (from healpy) (1.21.6)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from healpy) (1.7.3)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from healpy) (3.2.2)\n",
            "Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from astropy->healpy) (4.12.0)\n",
            "Requirement already satisfied: pyerfa>=1.7.3 in /usr/local/lib/python3.7/dist-packages (from astropy->healpy) (2.0.0.1)\n",
            "Requirement already satisfied: typing-extensions>=3.6.4 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->astropy->healpy) (4.1.1)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->astropy->healpy) (3.8.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->healpy) (1.4.3)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->healpy) (2.8.2)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->healpy) (0.11.0)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->healpy) (3.0.9)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.1->matplotlib->healpy) (1.15.0)\n",
            "Installing collected packages: healpy\n",
            "Successfully installed healpy-1.15.2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Introduction"
      ],
      "metadata": {
        "id": "aQnHG1l_TAdI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Simulating sky maps"
      ],
      "metadata": {
        "id": "uANAikuqTKEw"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Simulating with Python"
      ],
      "metadata": {
        "id": "e8PaiOdnG3BO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Simulate a gaussian source "
      ],
      "metadata": {
        "id": "hLLnp6G3Eh4K"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import k2jansky\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "def create_gaussian_src(src_size,src_std,src_flux_jansky):\n",
        "    # create a source with amplitude of 1 k\n",
        "    x,y = np.meshgrid(np.linspace(-(src_size//2),src_size//2,src_size),np.linspace(-(src_size//2),src_size//2,src_size))\n",
        "    mean_x=0\n",
        "    mean_y=0\n",
        "    src=np.exp(-(x-mean_x)**2/(2*src_std**2)) * np.exp(-(y-mean_y)**2/(2*src_std**2))\n",
        "    flux_kelvin_of_1k_amplitude=np.sum(src)\n",
        "    flux_jansky_of_1k_amplitude=k2jansky.k2jansky('freq',1300*10**6,16.5,1,flux_kelvin_of_1k_amplitude)\n",
        "    # add the src_flux_jansky factor\n",
        "    src=(src_flux_jansky/flux_jansky_of_1k_amplitude)*np.exp(-(x-mean_x)**2/(2*src_std**2)) * np.exp(-(y-mean_y)**2/(2*src_std**2))\n",
        "    return src\n",
        "\n",
        "d=create_gaussian_src(5,1.1,1)\n",
        "d\n",
        "\n",
        "\n",
        "\n",
        "    "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vabdCEuyEg4u",
        "outputId": "f9ea749f-4a09-483b-f1fd-625290a8d794"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.00049375, 0.00170565, 0.0025784 , 0.00170565, 0.00049375],\n",
              "       [0.00170565, 0.00589212, 0.00890701, 0.00589212, 0.00170565],\n",
              "       [0.0025784 , 0.00890701, 0.01346458, 0.00890701, 0.0025784 ],\n",
              "       [0.00170565, 0.00589212, 0.00890701, 0.00589212, 0.00170565],\n",
              "       [0.00049375, 0.00170565, 0.0025784 , 0.00170565, 0.00049375]])"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Simulate a map"
      ],
      "metadata": {
        "id": "tIGPw22-oC1l"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "import create_gaussian_src\n",
        "\n",
        "\n",
        "\n",
        "def create_map(map_size,src_number,src_size,src_std,src_flux_jansky,noise_std):\n",
        "    \"\"\" This function create a map as a 2D Numpy array, enter map_size,src_number,src_size,src_std,src_flux_jansky,noise_std\"\"\"\n",
        "\n",
        "    #create empty map\n",
        "    rectmap=np.zeros((map_size,map_size))\n",
        "\n",
        "    #create a gaussian source\n",
        "    src=create_gaussian_src.create_gaussian_src(src_size,src_std,src_flux_jansky)\n",
        "\n",
        "    #add src_number source to with random position, but with 2*src_size distant from the boundary.\n",
        "    x=np.random.random_integers(low=2*src_size,high=map_size-2*src_size,size=src_number)\n",
        "    y=np.random.random_integers(low=2*src_size,high=map_size-2*src_size,size=src_number) #generate random position, note that x and y here represent a matrix like coordinate, so the number of column or absice is y, the number of row or ordonnée is x\n",
        "    \n",
        "    for i in range(0,len(x)):\n",
        "            rectmap[y[i]-(src_size//2):y[i]+((src_size//2)+1),x[i]-(src_size//2):x[i]+((src_size//2)+1)]=src\n",
        "    \n",
        "    #add gaussian noise\n",
        "    noise =  make_noise_image((map_size,map_size), distribution='gaussian', mean=0,stddev=noise_std)\n",
        "    rectmap=rectmap+noise\n",
        "    catalog=np.transpose((y,x,src_flux_jansky*np.ones_like(x)))#upper pix_center, pix center to index. pix corner ??? plot??    \n",
        "    return (rectmap,catalog)\n",
        "\n",
        "e=create_map(50,10,5,1.1,1,0.001)  \n"
      ],
      "metadata": {
        "id": "_5aQFbM4oCiz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2b1e7c7e-cdfe-4e7a-a842-e2136894b449"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:17: DeprecationWarning: This function is deprecated. Please call randint(10, 40 + 1) instead\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:18: DeprecationWarning: This function is deprecated. Please call randint(10, 40 + 1) instead\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Map making with JSKyMap software"
      ],
      "metadata": {
        "id": "E0J07U3nHI7G"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Source finder"
      ],
      "metadata": {
        "id": "XB15hpO1HR0O"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Detailed notebook description"
      ],
      "metadata": {
        "id": "y7ZTlWxxTRlC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "This program take a map to give source catalog. Two kinds of input are used. The standard kind consist of spherical full sky map in fits format and healpix pixelization. The other kind is a practical solution while developing the algorithm, in this case the input consist of numpy array.\n",
        "\n",
        "<br>\n",
        "\n",
        "**First step** <br> \n",
        "Take the fits file <br> convert it to numpy array of spherical map healpix pixel (with healpy) <br> crop a projection of NCP and put it in a numpy array of rectangular map pixels\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "H4SOJeUre_XX"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 130
        },
        "id": "PkSndI_ze064",
        "outputId": "e81c12e7-68b8-4dc2-ce73-11f6ab530912"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-5-bf53851f5aa9>\"\u001b[0;36m, line \u001b[0;32m5\u001b[0m\n\u001b[0;31m    map_resolution=\u001b[0m\n\u001b[0m                   ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ],
      "source": [
        "import healpy\n",
        "\n",
        "fits_filename=''\n",
        "projection_center=(90,0)\n",
        "map_resolution=\n",
        "map_size=\n",
        "\n",
        "#convert the fits file into healpix array\n",
        "spherical_map=hp.read_map(fits_filename,dtype=None)\n",
        "\n",
        "#crop a gnomonic view at NCP\n",
        "rectmap=hp.gnomview(spherical_map,rot=[projection_center[0],projection_center[1]],reso=map_resolution,xsize=map_size,ysize=map_size,return_projected_map=True,no_plot=True)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rectmap=e[0]\n",
        "simulated_catalog=e[1]\n",
        "plt.imshow(rectmap)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 284
        },
        "id": "OkqtbbyTTluu",
        "outputId": "ed62e84a-e761-4cf1-8598-21c7220ca639"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f5facd390d0>"
            ]
          },
          "metadata": {},
          "execution_count": 6
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Second step** <br> Now, we the map is a numpy array. We execute the src finder on it <br> Global background estimation <br> Execute the detection criteria equation <br> if no detection give ????? <br> else <br> sort by signal to noise <br> hierarchical merging <br> compute barycenter <br> give a final data frame"
      ],
      "metadata": {
        "id": "T6gseO72mpjF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# global background estimation\n",
        "global_bg=np.median(rectmap)\n",
        "global_std=np.std(rectmap)\n"
      ],
      "metadata": {
        "id": "n3isujNPpQpR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Creating the kernels and detection tools before execute the detection criteria\n",
        "<br>\n",
        "we used three kernels : cental, intermediate, and peripheric <br> (**could be made with open CV???**)"
      ],
      "metadata": {
        "id": "v_ePZpWsqgNR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "detection_kernels_size=(3,5,7) # a tuple with the 3 sizes of the 3 kernels\n",
        "\n",
        "#the central kernel, it compute the average of a rectangular zone include the targeted pixel and his neighbours\n",
        "a=1/detection_kernels_size[0]**2\n",
        "central_detection_kernel=a*np.ones((detection_kernels_size[0],detection_kernels_size[0]))\n",
        "avg_central_detection_kernel=nd.convolve(rectmap,central_detection_kernel)\n",
        "\n",
        "#the intermediate kernel, compute average also\n",
        "b=1/(detection_kernels_size[1]**2-detection_kernels_size[0]**2)\n",
        "intermediate_detection_kernel=b*np.pad(0*central_detection_kernel,int((detection_kernels_size[1]-detection_kernels_size[0])/2),pad_with)\n",
        "avg_intermediate_detection_kernel=nd.convolve(rectmap,intermediate_detection_kernel)\n",
        "\n",
        "#the third kernel, it represent the local background, so here we are interested in average but also the median, here the syntax I correct it later\n",
        "\n",
        "#the average kernel\n",
        "c=1/(detection_kernels_size[2]**2-detection_kernels_size[1]**2)\n",
        "peripheric_detection_kernel=c*np.pad(0*intermediate_detection_kernel,int((detection_kernels_size[2]-detection_kernels_size[1])/2),pad_with)\n",
        "avg_peripheric_detection_kernel=nd.convolve(rectmap,peripheric_detection_kernel)\n",
        "\n",
        "# a median and std kernel based on the average kernel   \n",
        "peripheric_median_map=np.zeros_like(rectmap)\n",
        "peripheric_std_map = np.zeros_like(rectmap)\n",
        "mask=np.array(peripheric_detection_kernel==0)\n",
        "for i in range(int(detection_kernels_size[2]/2),rectmap.shape[0]-int(detection_kernels_size[2]/2)):\n",
        "    for j in range(int(detection_kernels_size[2]/2),rectmap.shape[1]-int(detection_kernels_size[2]/2)):\n",
        "        if (detection_kernels_size[2]/2).is_integer()==False:\n",
        "            kernel=rectmap[i-int(detection_kernels_size[2]/2):i+(int(detection_kernels_size[2]/2)+1),j-int(detection_kernels_size[2]/2):j+(int(detection_kernels_size[2]/2)+1)]\n",
        "                    \n",
        "        else:\n",
        "                    \n",
        "            kernel=rectmap[i-int(detection_kernels_size[2]/2):i+int(detection_kernels_size[2]/2),j-int(detection_kernels_size[2]/2):j+int(detection_kernels_size[2]/2)]\n",
        "                    \n",
        "        masked_kernel=ma.masked_array(kernel,mask)\n",
        "        peripheric_std_map[i][j]=np.ma.std(masked_kernel)\n",
        "        peripheric_median_map[i][j]=np.ma.median(masked_kernel)\n",
        "    "
      ],
      "metadata": {
        "id": "1qvLJ_Z2qlYh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now we have the detection kernels <br> we conduct a detection criteria: a pixels belong to a potential source if: avg(central_kernel)>local_bg+n*local_std"
      ],
      "metadata": {
        "id": "3BWmBb7pvhsi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "n=1\n",
        "threshold = peripheric_median_map + n * global_std \n",
        "#threshold = detection_tools[1][2][1] + n * detection_tools[1][2][2] # above local background + n * local sigma\n",
        "first_condition = avg_central_detection_kernel >= threshold \n",
        "detected_src_coor_upper_pixcorner = np.where( first_condition ) \n",
        "\n",
        "detected_src_coor_upper_pixcorner"
      ],
      "metadata": {
        "id": "aHUunzSWw5Va",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0295b55e-a42c-4e4b-ed6d-8086ef12e6e4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 19,\n",
              "        19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24,\n",
              "        24, 25, 25, 25, 25, 25, 26, 26, 26, 27, 27, 27, 29, 29, 29, 29, 29,\n",
              "        29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31,\n",
              "        31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33,\n",
              "        34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38,\n",
              "        38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39,\n",
              "        39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40,\n",
              "        40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 41,\n",
              "        42, 42]),\n",
              " array([15, 16, 14, 15, 16, 13, 14, 15, 16, 17, 13, 14, 15, 16, 17, 15, 37,\n",
              "        38, 37, 38, 39, 36, 37, 38, 39, 40, 36, 37, 38, 39, 32, 38, 31, 32,\n",
              "        33, 30, 31, 32, 33, 34, 31, 32, 33, 31, 32, 33, 11, 12, 38, 39, 40,\n",
              "        41, 42,  9, 10, 11, 12, 38, 39, 40, 41, 42,  9, 10, 11, 12, 13, 39,\n",
              "        40, 41, 42, 10, 11, 12, 28, 29, 30, 40, 41, 11, 27, 28, 29, 30, 31,\n",
              "        27, 28, 29, 30, 31, 28, 29, 30, 31, 29, 30, 13, 14, 15, 23, 24, 12,\n",
              "        13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 37, 38, 39, 13, 14, 15,\n",
              "        17, 18, 19, 20, 21, 22, 23, 24, 25, 37, 38, 39, 40, 14, 18, 19, 20,\n",
              "        21, 22, 23, 24, 36, 37, 38, 39, 40, 19, 23, 24, 36, 37, 38, 39, 40,\n",
              "        37, 38]))"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now we have a list of pixels that are said to belong to potential sources. We should sort these pixels into sources. We sort pixels by their S/N ratio, and then merge them hierarchicaly. We set a threshold of temperature, and assign other pixels inside an aperture to the targeted one.<br>\n",
        "Sorting by signal to noise"
      ],
      "metadata": {
        "id": "_xPLAmUKsWS_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# the signal to noise ratio here is the ratio of the average of central kernel and the std of the peripheric kernel, so this function compute the std and later the ratio\n",
        "    \n",
        "    #computing signal to noise ratio\n",
        "signal_to_noise_map = avg_peripheric_detection_kernel/peripheric_median_map #average central kernel/std of pheripherical kernel\n",
        "signal_to_noise_list = signal_to_noise_map[detected_src_coor_upper_pixcorner]\n",
        "signal_list = rectmap[detected_src_coor_upper_pixcorner]\n",
        "signal_to_noise_and_coor_list = np.transpose(( np.arange(0,len(detected_src_coor_upper_pixcorner[0])),signal_list,signal_to_noise_list,detected_src_coor_upper_pixcorner[1],detected_src_coor_upper_pixcorner[0] ))\n",
        "\n",
        "argsorted_signal_to_noise_index_list = np.flip(np.argsort(signal_to_noise_list))\n",
        "\n",
        "sorted_signal_to_noise_and_coor_list = np.transpose(( argsorted_signal_to_noise_index_list, signal_list[argsorted_signal_to_noise_index_list],signal_to_noise_list[argsorted_signal_to_noise_index_list], detected_src_coor_upper_pixcorner[1][argsorted_signal_to_noise_index_list], detected_src_coor_upper_pixcorner[0][argsorted_signal_to_noise_index_list], np.zeros_like(signal_to_noise_list) ))\n",
        "sorted_signal_to_noise_and_coor_list[:,5]"
      ],
      "metadata": {
        "id": "RVPLiJVivk_B",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "398e545b-ba59-4e25-a0b1-6aecd48b6cb8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: RuntimeWarning: divide by zero encountered in true_divide\n",
            "  \"\"\"\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "       0., 0.])"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "After sorting the S/N<br>\n",
        "hierarchical merging\n",
        "\n"
      ],
      "metadata": {
        "id": "fP2PFYmjxzAq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "aperture=(2.5,3)\n",
        "table = sorted_signal_to_noise_and_coor_list\n",
        "all_agglomerations_index=[]\n",
        "for i in range(0,len(table[:,0])):\n",
        "    if table[:,5][i]==0:\n",
        "        pixels_index_in_each_src=[]\n",
        "        for j in range(0,len(table[:,0])):\n",
        "            if ( table[:,3][j] >= table[:,3][i]-aperture[0] ) and ( table[:,3][j] <= table[:,3][i]+aperture[0] ) and  ( table[:,4][j] >= table[:,4][i]-aperture[0] ) and ( table[:,4][j] <= table[:,4][i]+aperture[0] ):\n",
        "                offset=np.sqrt( ( table[:,3][i] - table[:,3][j] )**2 + (table[:,4][i] - table[:,4][j])**2 )\n",
        "                if offset<=aperture[1]:\n",
        "                    pixels_index_in_each_src.append(int(table[:,0][j]))\n",
        "                    table[:,5][j]=1\n",
        "        all_agglomerations_index.append(pixels_index_in_each_src)\n",
        "all_agglomerations_index"
      ],
      "metadata": {
        "id": "kqik2oBZyGRk",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a1e5034c-3bdb-45e8-e9b3-6feb280f53d1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[[0, 4, 5, 2, 7, 6, 3, 8, 9, 1],\n",
              " [100, 125, 127, 124, 99, 111, 110, 126, 112],\n",
              " [10, 11, 5, 2, 7, 6, 12, 3, 15],\n",
              " [43, 36, 44, 35, 45, 37, 38, 41, 42, 40],\n",
              " [76, 74, 81, 75, 83, 82, 84, 87, 89, 86, 88],\n",
              " [48, 57, 58, 49, 67, 59, 50, 68],\n",
              " [80, 74, 81, 85, 75, 82, 87, 91, 86, 90],\n",
              " [148, 154, 153, 141, 128, 149, 150, 142, 129, 140],\n",
              " [123,\n",
              "  125,\n",
              "  124,\n",
              "  146,\n",
              "  145,\n",
              "  122,\n",
              "  121,\n",
              "  99,\n",
              "  135,\n",
              "  108,\n",
              "  138,\n",
              "  137,\n",
              "  136,\n",
              "  109,\n",
              "  134,\n",
              "  111,\n",
              "  110,\n",
              "  107],\n",
              " [25, 31, 17, 24, 28, 23, 19, 29, 20],\n",
              " [78, 77, 70, 58, 69, 67, 59, 60, 68, 61],\n",
              " [14, 4, 13, 7, 12, 3, 8, 9, 15],\n",
              " [55, 54, 66, 47, 46, 71, 56, 73, 72, 64, 65, 62, 63, 53],\n",
              " [144, 154, 115, 131, 152, 130, 150, 142, 151, 129, 143, 114],\n",
              " [44, 39, 30, 45, 37, 38, 41, 34, 33, 42],\n",
              " [115, 113, 141, 128, 130, 142, 129, 143, 140, 114],\n",
              " [52, 70, 69, 59, 60, 50, 51, 68, 61],\n",
              " [145, 119, 121, 105, 104, 118, 98, 120, 106, 133, 134, 107],\n",
              " [95, 94, 92, 87, 89, 93, 91, 86, 90, 88],\n",
              " [31, 26, 21, 28, 23, 27, 18, 19, 22],\n",
              " [104, 118, 98, 96, 101, 116, 117, 102, 97, 103],\n",
              " [66, 79, 71, 73, 72, 64, 65, 62, 63],\n",
              " [105, 104, 118, 101, 132, 116, 117, 102, 103],\n",
              " [17, 21, 24, 16, 23, 18, 19, 22, 20],\n",
              " [36, 35, 30, 37, 38, 41, 32, 34, 33, 42, 40],\n",
              " [125, 127, 124, 146, 138, 137, 111, 110, 139, 126, 112, 147]]"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Compute barycenters"
      ],
      "metadata": {
        "id": "VrKwbDrezJRy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "all_agglomerations=np.transpose(( np.arange(0,len(all_agglomerations_index)), all_agglomerations_index))  \n",
        "x_barycenter_list=[]\n",
        "y_barycenter_list=[]\n",
        "for i in range(0,len(all_agglomerations[:,1])):\n",
        "    x_barycenter=np.sum(signal_to_noise_and_coor_list[:,4][all_agglomerations[:,1][i]]*signal_to_noise_and_coor_list[:,1][all_agglomerations[:,1][i]])/np.sum(signal_to_noise_and_coor_list[:,1][all_agglomerations[:,1][i]])\n",
        "    y_barycenter=np.sum(signal_to_noise_and_coor_list[:,3][all_agglomerations[:,1][i]]*signal_to_noise_and_coor_list[:,1][all_agglomerations[:,1][i]])/np.sum(signal_to_noise_and_coor_list[:,1][all_agglomerations[:,1][i]])\n",
        "    x_barycenter_list.append(x_barycenter)\n",
        "    y_barycenter_list.append(y_barycenter)\n",
        "\n",
        "barycenter_list=np.transpose((np.round(y_barycenter_list,1).astype(int),np.round(x_barycenter_list,1).astype(int) ))\n"
      ],
      "metadata": {
        "id": "dypZ2ClzzMhz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "81f1a9a2-6bdf-4a0f-a341-7cf9873e8453"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:43: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n",
            "  result = getattr(asarray(obj), method)(*args, **kwds)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Compute flux"
      ],
      "metadata": {
        "id": "ORQFOA6qgmRu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "flux_integration_kernel=np.ones((detection_kernels_size[2],detection_kernels_size[2]))\n",
        "flux_map=nd.convolve(rectmap,flux_integration_kernel)-(detection_kernels_size[2]**2)*peripheric_median_map  # what to do with negative median - use farer and thiner ring\n",
        "#coor=np.transpose((barycenter_list[0],barycenter_list[1]))\n",
        "coor=( barycenter_list[:,1] , barycenter_list[:,0] )\n",
        "flux_list_k=flux_map[coor]\n",
        "flux_list_jansky=k2jansky.k2jansky('freq',1300*10**6,16.5,1,flux_list_k)\n",
        "\n",
        "\n",
        "flux_list=(flux_list_k,flux_list_jansky)\n",
        "     "
      ],
      "metadata": {
        "id": "atOQTdq5glHA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "3 kind of cartesian coordinate"
      ],
      "metadata": {
        "id": "1pGUHVQeqW9K"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import convert_map_index\n",
        "\n",
        "simulated_coor_center=convert_map_index.convert_upper_to_center( [ simulated_catalog[:,0],simulated_catalog[:,1] ] , np.shape(rectmap)[0],len(simulated_catalog[:,0]) )[4]\n",
        "coor_center=convert_map_index.convert_upper_to_center(detected_src_coor_upper_pixcorner,np.shape(rectmap)[0],len(detected_src_coor_upper_pixcorner[0]))[4]\n",
        "bar_center=convert_map_index.convert_upper_to_center([barycenter_list[:,1],barycenter_list[:,0]],np.shape(rectmap)[0],len(barycenter_list[0]))[4]\n",
        "\n"
      ],
      "metadata": {
        "id": "_PUu4gyRqc3V"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "World coordinate"
      ],
      "metadata": {
        "id": "LiIW5lEO0TIb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pixel2world\n",
        "projection_center=(90,180)\n",
        "map_resolution=18\n",
        "\n",
        "barycenter_list_world=pixel2world.pixel2world(projection_center,map_resolution,bar_center)\n",
        "simulated_src_world=pixel2world.pixel2world(projection_center,map_resolution,simulated_coor_center)\n"
      ],
      "metadata": {
        "id": "nGrBRd5k0VTD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Final catalog"
      ],
      "metadata": {
        "id": "jivOGi7f1VFS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "final_catalog=np.transpose((barycenter_list_world[:,0],barycenter_list_world[:,1],flux_list[1]))\n",
        "dd=np.argsort(final_catalog[:,0])\n",
        "final_catalog=final_catalog[dd]\n",
        "final_catalog=np.column_stack( ( range(0,len(final_catalog)) , final_catalog ))\n",
        "\n",
        "import pandas as pd\n",
        "\n",
        "detection_dataframe=pd.DataFrame(final_catalog,columns=['index','dec[deg]','ra[deg]','flux[Jy]'])\n",
        "detection_dataframe\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 855
        },
        "id": "DQ65hlA-1YKn",
        "outputId": "81646a24-ff09-4df8-d744-20a5ce653b8d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    index    dec[deg]   ra[deg]  flux[Jy]\n",
              "0     0.0  -88.950118 -2.547891  0.942136\n",
              "1     1.0  -88.650250 -2.547612  0.968893\n",
              "2     2.0  -88.650250 -2.846864  1.031994\n",
              "3     3.0  -87.751156 -0.149884  0.943940\n",
              "4     4.0  -87.751156 -0.149884  0.943940\n",
              "5     5.0  -87.751156  0.149884  0.823746\n",
              "6     6.0  -86.255341  1.047641  0.658832\n",
              "7     7.0  -86.255341  1.346870  0.668324\n",
              "8     8.0  -86.255341 -4.629968  0.922238\n",
              "9     9.0  -85.956725 -4.330906  0.816580\n",
              "10   10.0  -85.956725 -4.330906  0.816580\n",
              "11   11.0  -85.956725  1.047270  0.971660\n",
              "12   12.0  -85.658329 -1.644813  0.883383\n",
              "13   13.0  -85.360169 -1.644141  1.123199\n",
              "14   14.0  -85.360169 -1.644141  1.123199\n",
              "15   15.0  265.658329 -1.943658  1.043867\n",
              "16   16.0  265.956725 -1.645441  0.972733\n",
              "17   17.0  266.554161 -4.035989  0.806118\n",
              "18   18.0  266.853168 -4.037198  0.824569\n",
              "19   19.0  266.853168  3.739029  0.765345\n",
              "20   20.0  267.152347  4.038299  0.907758\n",
              "21   21.0  267.152347  3.740048  1.178538\n",
              "22   22.0  267.751156 -4.040171  1.069463\n",
              "23   23.0  268.950118 -4.340945  1.605815\n",
              "24   24.0  269.550009 -4.341537  1.134521\n",
              "25   25.0  269.550009 -4.043151  0.801618"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2615db88-e770-48f6-ba1c-db34357bce9d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>dec[deg]</th>\n",
              "      <th>ra[deg]</th>\n",
              "      <th>flux[Jy]</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>-88.950118</td>\n",
              "      <td>-2.547891</td>\n",
              "      <td>0.942136</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>-88.650250</td>\n",
              "      <td>-2.547612</td>\n",
              "      <td>0.968893</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.0</td>\n",
              "      <td>-88.650250</td>\n",
              "      <td>-2.846864</td>\n",
              "      <td>1.031994</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3.0</td>\n",
              "      <td>-87.751156</td>\n",
              "      <td>-0.149884</td>\n",
              "      <td>0.943940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4.0</td>\n",
              "      <td>-87.751156</td>\n",
              "      <td>-0.149884</td>\n",
              "      <td>0.943940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>5.0</td>\n",
              "      <td>-87.751156</td>\n",
              "      <td>0.149884</td>\n",
              "      <td>0.823746</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>6.0</td>\n",
              "      <td>-86.255341</td>\n",
              "      <td>1.047641</td>\n",
              "      <td>0.658832</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>7.0</td>\n",
              "      <td>-86.255341</td>\n",
              "      <td>1.346870</td>\n",
              "      <td>0.668324</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>8.0</td>\n",
              "      <td>-86.255341</td>\n",
              "      <td>-4.629968</td>\n",
              "      <td>0.922238</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>9.0</td>\n",
              "      <td>-85.956725</td>\n",
              "      <td>-4.330906</td>\n",
              "      <td>0.816580</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>10.0</td>\n",
              "      <td>-85.956725</td>\n",
              "      <td>-4.330906</td>\n",
              "      <td>0.816580</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>11.0</td>\n",
              "      <td>-85.956725</td>\n",
              "      <td>1.047270</td>\n",
              "      <td>0.971660</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>12.0</td>\n",
              "      <td>-85.658329</td>\n",
              "      <td>-1.644813</td>\n",
              "      <td>0.883383</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>13.0</td>\n",
              "      <td>-85.360169</td>\n",
              "      <td>-1.644141</td>\n",
              "      <td>1.123199</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>14.0</td>\n",
              "      <td>-85.360169</td>\n",
              "      <td>-1.644141</td>\n",
              "      <td>1.123199</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>15.0</td>\n",
              "      <td>265.658329</td>\n",
              "      <td>-1.943658</td>\n",
              "      <td>1.043867</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>16.0</td>\n",
              "      <td>265.956725</td>\n",
              "      <td>-1.645441</td>\n",
              "      <td>0.972733</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>17.0</td>\n",
              "      <td>266.554161</td>\n",
              "      <td>-4.035989</td>\n",
              "      <td>0.806118</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>18.0</td>\n",
              "      <td>266.853168</td>\n",
              "      <td>-4.037198</td>\n",
              "      <td>0.824569</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>19.0</td>\n",
              "      <td>266.853168</td>\n",
              "      <td>3.739029</td>\n",
              "      <td>0.765345</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>20.0</td>\n",
              "      <td>267.152347</td>\n",
              "      <td>4.038299</td>\n",
              "      <td>0.907758</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>21.0</td>\n",
              "      <td>267.152347</td>\n",
              "      <td>3.740048</td>\n",
              "      <td>1.178538</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>22.0</td>\n",
              "      <td>267.751156</td>\n",
              "      <td>-4.040171</td>\n",
              "      <td>1.069463</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>23.0</td>\n",
              "      <td>268.950118</td>\n",
              "      <td>-4.340945</td>\n",
              "      <td>1.605815</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>24.0</td>\n",
              "      <td>269.550009</td>\n",
              "      <td>-4.341537</td>\n",
              "      <td>1.134521</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>25.0</td>\n",
              "      <td>269.550009</td>\n",
              "      <td>-4.043151</td>\n",
              "      <td>0.801618</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2615db88-e770-48f6-ba1c-db34357bce9d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2615db88-e770-48f6-ba1c-db34357bce9d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2615db88-e770-48f6-ba1c-db34357bce9d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Simulated final catalog"
      ],
      "metadata": {
        "id": "452BC06J2fOB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "simulated_final_catalog=np.transpose((simulated_src_world[:,0],simulated_src_world[:,1],simulated_catalog[:,2]))\n",
        "ff=np.argsort(simulated_final_catalog[:,0])\n",
        "simulated_final_catalog=simulated_final_catalog[ff]\n",
        "simulated_final_catalog=np.column_stack( ( range(0,len(simulated_final_catalog)) , simulated_final_catalog ))\n",
        "\n",
        "simulated_final_catalog\n",
        "\n",
        "simulation_dataframe=pd.DataFrame(simulated_final_catalog,columns=['index','dec[deg]','ra[deg]','flux[Jy]'])\n",
        "simulation_dataframe\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 359
        },
        "id": "DWe3KeDH2g7t",
        "outputId": "2ee156ee-b91f-4dfe-a9b1-c7c7d1a181b3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   index    dec[deg]   ra[deg]  flux[Jy]\n",
              "0    0.0  -88.650250 -2.846864       1.0\n",
              "1    1.0  -87.751156 -0.149884       1.0\n",
              "2    2.0  -85.956725  1.047270       1.0\n",
              "3    3.0  -85.956725 -4.628333       1.0\n",
              "4    4.0  -85.360169 -1.644141       1.0\n",
              "5    5.0  265.956725 -1.944400       1.0\n",
              "6    6.0  266.853168 -4.037198       1.0\n",
              "7    7.0  267.152347  3.740048       1.0\n",
              "8    8.0  268.350456 -4.339878       1.0\n",
              "9    9.0  269.550009 -4.341537       1.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e0ce62f4-8525-4c4f-ae36-0a0bc6a33d89\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>dec[deg]</th>\n",
              "      <th>ra[deg]</th>\n",
              "      <th>flux[Jy]</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>-88.650250</td>\n",
              "      <td>-2.846864</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>-87.751156</td>\n",
              "      <td>-0.149884</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.0</td>\n",
              "      <td>-85.956725</td>\n",
              "      <td>1.047270</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3.0</td>\n",
              "      <td>-85.956725</td>\n",
              "      <td>-4.628333</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4.0</td>\n",
              "      <td>-85.360169</td>\n",
              "      <td>-1.644141</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>5.0</td>\n",
              "      <td>265.956725</td>\n",
              "      <td>-1.944400</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>6.0</td>\n",
              "      <td>266.853168</td>\n",
              "      <td>-4.037198</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>7.0</td>\n",
              "      <td>267.152347</td>\n",
              "      <td>3.740048</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>8.0</td>\n",
              "      <td>268.350456</td>\n",
              "      <td>-4.339878</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>9.0</td>\n",
              "      <td>269.550009</td>\n",
              "      <td>-4.341537</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e0ce62f4-8525-4c4f-ae36-0a0bc6a33d89')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e0ce62f4-8525-4c4f-ae36-0a0bc6a33d89 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e0ce62f4-8525-4c4f-ae36-0a0bc6a33d89');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Plot"
      ],
      "metadata": {
        "id": "bJtgKGsKEkL9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        " import ploting_test\n",
        " ploting_test.ploting_test(rectmap,coor_center,bar_center,simulated_coor_center)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 251
        },
        "id": "YKc7N7KhElDs",
        "outputId": "3c3bffba-31c2-43af-cb0b-4f900a7361ca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## object oriented version"
      ],
      "metadata": {
        "id": "mIxkCQ1NzO8W"
      }
    }
  ]
}